# 热加载和热部署的区别
- 都是不需要重启就可以完成加载
热部署:
	在服务运行时,允许从新部署项目
	重新的是整个应用程序
	更多用在生产环境
热加载:
	在修改代码后,运行时重新加载class文件
	重新的是修改后的class文件
	更多用在开发环境

JAVA类的加载过程
	1.初始化虚拟机
	2.产生启动类加载器
	3.(子类,自动加载)标准扩展类加载器
	4.(子类,自动加载)系统类加载器
	5.(父类加载)加载class文件

类加载的五个阶段
	1.加载	找到类的静态文件,并存放在虚拟机中,存放到方法区中,生成class文件.允许用户自定义类加载器
	2.验证	确保字节码的安全,可以通过java虚拟器的启动参数进行关闭某些验证
	3.准备	赋初始值,针对static和private修饰的变量赋值为0或者null
	4.解析	将符号引用变为直接引用
	5.初始化	调用类的初始化方法,并为变量赋自定义的值.		使用final修饰的关键字不会调用初始化方法

Java类加载器特点
	1.由AppClass Loader(系统类加载器)开始加载指定的类
	2.类加载器将加载任务交给父类,如果父类找不到,自己去加载
	3.Bootstrap Loader(启动类加载器)是最顶级的类加载器

Java类的热部署
	1.类的热加载实现
	2.Tomcat的配置实现,其实在部署项目时,即为热部署的方式
	
自定义类加载
	1.创建自定义类加载方法,传入类所在的路径和类名,将类读取为字节数组,调用父类方法,完成加载.
	2.创建自定义接口和其实现类,当子类更新时,动态加载.
	3.创建自定义类,用来封装类的加载信息.
	
Spring Boot实现热部署
	1.使用Spring Loaded
		1.Maven启动设置
		2.Application启动时,配置启动参数
	2.使用Spring-boot-devtools