package armVisible;
/**线程锁的案例*/
public class SynchronizedDemo {

	/**共享变量*/
	private boolean ready = false;
	private int result = 0;
	private int number = 1;
	
	/**写操作,为共享变量写入最新值*/
	public void write() {
		ready = true;
		number = 2;
	}
	
	/**读操作,为共享变量读取最新值*/
	public void read() {
		if (ready) {
			result = number * 3;
		}
		System.out.println("result的值为:"+result);
	}
	
	/**内部类*/
	private class ReadWriteThread extends Thread{
		//根据构造方法中传入的flag参数,确定线程执行读操作或者写操作
		private boolean flag;
		public ReadWriteThread (boolean flag) {
			this.flag = flag;
		}
		
		@Override
		public void run() {
			if (flag) {
				write();
			}else{
				read();
			}
		}
		
		
	}
	
}
