package javaAnnotation.demo;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import com.sun.mail.handlers.message_rfc822;


/**进行查询的测试类*/
public class QueryTest {

	private static String query(User user) throws Exception{
		StringBuffer sql = new StringBuffer();
		//获取被注解表示的类
		Class<?> clazz = user.getClass();
		//获取类上的表示表名的注解
		//首先判断是否存在该注解
		boolean tableExist = clazz.isAnnotationPresent(Table.class);
		if (!tableExist) {
			return null;		//如果不存在,程序终止
		}
		//获取注解对象
		Table table = (Table) clazz.getAnnotation(Table.class);
		//获取注解对象中的值
		String tableName = table.value();
		//拼写SQL语句
		sql.append(" select * from ").append( tableName ).append(" where 1=1 ");
		//遍历所有的属性
		Field[] files = clazz.getDeclaredFields();
		for (Field field : files) {
			//是够该字段上有相应的注解
			boolean columnExist = field.isAnnotationPresent(Column.class);
			if (columnExist) {
				//获得字段对象上的注解信息,表字段信息
				Column column = field.getAnnotation(Column.class);
				String columnName = column.value();
				//获得字段封装的get方法的值
				String fileName = field.getName();
				//获得各种get方法		get + 首字母大写  + 剩下部分
				String getMethodName = "get"+fileName.substring(0, 1).toUpperCase()+fileName.substring(1);
				//传入方法名,完成对方法的获取
				Method getMethod = clazz.getMethod(getMethodName);
				//传入反射对象,参数,执行对应方法
				String fieldValue =(String) getMethod.invoke(clazz, null);
				//拼装SQL
				sql.append(" and ").append(fileName).append(" = ").append(fieldValue);
				
			}
		}
		//获取注解后判断条件进行追加SQL
		
	}
	
	public static void main(String[] args) throws Exception{
		
		/*定义查询条件*/
		User user1 = new User();
		user1.setId(10);
		
		User user2 = new User();
		user2.setUsername("张三");
		
		User user3 = new User();
		user3.setEmail("123@qq.com,456@qq.com,789@qq.com");
		
		/*传入对象,生成SQL语句*/
		String sql1 = query(user1);
		String sql2 = query(user2);
		String sql3 = query(user3);
	}
}
