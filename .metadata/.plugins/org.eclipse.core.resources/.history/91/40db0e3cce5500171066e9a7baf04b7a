package com.model.proxy.dynamical.proxy;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class TimeHandler implements InvocationHandler {

	private Object targer;	//被代理类对象
	//通过构造器完成传入
	public TimeHandler(Object targer) {
		super();
		this.targer = targer;
	}

	@Override
	public void invoke(Object object, Method method) {
		//调用方法的执行,传入类进行反射
		try {
			method.invoke(targer);
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
